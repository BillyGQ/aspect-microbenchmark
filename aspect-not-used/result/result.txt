biqian@CT1-8724A-M</comput ~/work/sources/references/aspect-microbenchmark $ java -cp aspect-not-used/target/benchmark.jar com.priceline.jmh.withoutaspect.Computation
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/Users/biqian/work/sources/references/aspect-microbenchmark/aspect-not-used/target/benchmark.jar) to field java.io.Console.cs
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
# JMH version: 1.27
# VM version: JDK 15.0.2, Eclipse OpenJ9 VM, openj9-0.24.0
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /Users/biqian/.sdkman/candidates/java/15.0.2.j9-adpt/bin/java
# VM options: -server
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 10 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.priceline.jmh.withoutaspect.Computation.doWork

# Run progress: 0.00% complete, ETA 00:02:30
# Fork: N/A, test runs in the host VM
# *** WARNING: Non-forked runs may silently omit JVM options, mess up profilers, disable compiler hints, etc. ***
# *** WARNING: Use non-forked runs only for debugging purposes, not for actual performance runs. ***
# Warmup Iteration   1: 981545.242 ops/s
# Warmup Iteration   2: 963860.071 ops/s
# Warmup Iteration   3: 980578.324 ops/s
# Warmup Iteration   4: 981672.805 ops/s
# Warmup Iteration   5: 966514.807 ops/s
Iteration   1: 969193.251 ops/s
Iteration   2: 962805.589 ops/s
Iteration   3: 954734.532 ops/s
Iteration   4: 965368.300 ops/s
Iteration   5: 990841.625 ops/s
Iteration   6: 999904.464 ops/s
Iteration   7: 984589.511 ops/s
Iteration   8: 992725.365 ops/s
Iteration   9: 886658.535 ops/s
Iteration  10: 994202.897 ops/s

Result "com.priceline.jmh.withoutaspect.Computation.doWork":
  970102.407 ±(99.9%) 50133.311 ops/s [Average]
  (min, avg, max) = (886658.535, 970102.407, 999904.464), stdev = 33160.081
  CI (99.9%): [919969.095, 1020235.718] (assumes normal distribution)


# Run complete. Total time: 00:02:39

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark            Mode  Cnt       Score       Error  Units
Computation.doWork  thrpt   10  970102.407 ± 50133.311  ops/s
